# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.39
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pytipsy', [dirname(__file__)])
        except ImportError:
            import _pytipsy
            return _pytipsy
        if fp is not None:
            try:
                _mod = imp.load_module('_pytipsy', fp, pathname, description)
            finally:
                fp.close()
                return _mod
    _pytipsy = swig_import_helper()
    del swig_import_helper
else:
    import _pytipsy
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class TipsyHeader(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TipsyHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TipsyHeader, name)
    __repr__ = _swig_repr
    __swig_setmethods__["h_time"] = _pytipsy.TipsyHeader_h_time_set
    __swig_getmethods__["h_time"] = _pytipsy.TipsyHeader_h_time_get
    if _newclass:h_time = _swig_property(_pytipsy.TipsyHeader_h_time_get, _pytipsy.TipsyHeader_h_time_set)
    __swig_setmethods__["h_nBodies"] = _pytipsy.TipsyHeader_h_nBodies_set
    __swig_getmethods__["h_nBodies"] = _pytipsy.TipsyHeader_h_nBodies_get
    if _newclass:h_nBodies = _swig_property(_pytipsy.TipsyHeader_h_nBodies_get, _pytipsy.TipsyHeader_h_nBodies_set)
    __swig_setmethods__["h_nDims"] = _pytipsy.TipsyHeader_h_nDims_set
    __swig_getmethods__["h_nDims"] = _pytipsy.TipsyHeader_h_nDims_get
    if _newclass:h_nDims = _swig_property(_pytipsy.TipsyHeader_h_nDims_get, _pytipsy.TipsyHeader_h_nDims_set)
    __swig_setmethods__["h_nSph"] = _pytipsy.TipsyHeader_h_nSph_set
    __swig_getmethods__["h_nSph"] = _pytipsy.TipsyHeader_h_nSph_get
    if _newclass:h_nSph = _swig_property(_pytipsy.TipsyHeader_h_nSph_get, _pytipsy.TipsyHeader_h_nSph_set)
    __swig_setmethods__["h_nDark"] = _pytipsy.TipsyHeader_h_nDark_set
    __swig_getmethods__["h_nDark"] = _pytipsy.TipsyHeader_h_nDark_get
    if _newclass:h_nDark = _swig_property(_pytipsy.TipsyHeader_h_nDark_get, _pytipsy.TipsyHeader_h_nDark_set)
    __swig_setmethods__["h_nStar"] = _pytipsy.TipsyHeader_h_nStar_set
    __swig_getmethods__["h_nStar"] = _pytipsy.TipsyHeader_h_nStar_get
    if _newclass:h_nStar = _swig_property(_pytipsy.TipsyHeader_h_nStar_get, _pytipsy.TipsyHeader_h_nStar_set)
    def __init__(self): 
        this = _pytipsy.new_TipsyHeader()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pytipsy.delete_TipsyHeader
    __del__ = lambda self : None;
TipsyHeader_swigregister = _pytipsy.TipsyHeader_swigregister
TipsyHeader_swigregister(TipsyHeader)

class TipsyBaseParticle(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TipsyBaseParticle, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TipsyBaseParticle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mass"] = _pytipsy.TipsyBaseParticle_mass_set
    __swig_getmethods__["mass"] = _pytipsy.TipsyBaseParticle_mass_get
    if _newclass:mass = _swig_property(_pytipsy.TipsyBaseParticle_mass_get, _pytipsy.TipsyBaseParticle_mass_set)
    __swig_setmethods__["pos"] = _pytipsy.TipsyBaseParticle_pos_set
    __swig_getmethods__["pos"] = _pytipsy.TipsyBaseParticle_pos_get
    if _newclass:pos = _swig_property(_pytipsy.TipsyBaseParticle_pos_get, _pytipsy.TipsyBaseParticle_pos_set)
    __swig_setmethods__["vel"] = _pytipsy.TipsyBaseParticle_vel_set
    __swig_getmethods__["vel"] = _pytipsy.TipsyBaseParticle_vel_get
    if _newclass:vel = _swig_property(_pytipsy.TipsyBaseParticle_vel_get, _pytipsy.TipsyBaseParticle_vel_set)
    __swig_setmethods__["phi"] = _pytipsy.TipsyBaseParticle_phi_set
    __swig_getmethods__["phi"] = _pytipsy.TipsyBaseParticle_phi_get
    if _newclass:phi = _swig_property(_pytipsy.TipsyBaseParticle_phi_get, _pytipsy.TipsyBaseParticle_phi_set)
    __swig_setmethods__["density"] = _pytipsy.TipsyBaseParticle_density_set
    __swig_getmethods__["density"] = _pytipsy.TipsyBaseParticle_density_get
    if _newclass:density = _swig_property(_pytipsy.TipsyBaseParticle_density_get, _pytipsy.TipsyBaseParticle_density_set)
    def __init__(self): 
        this = _pytipsy.new_TipsyBaseParticle()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pytipsy.delete_TipsyBaseParticle
    __del__ = lambda self : None;
TipsyBaseParticle_swigregister = _pytipsy.TipsyBaseParticle_swigregister
TipsyBaseParticle_swigregister(TipsyBaseParticle)

class TipsyGasParticle(TipsyBaseParticle):
    __swig_setmethods__ = {}
    for _s in [TipsyBaseParticle]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TipsyGasParticle, name, value)
    __swig_getmethods__ = {}
    for _s in [TipsyBaseParticle]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TipsyGasParticle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["rho"] = _pytipsy.TipsyGasParticle_rho_set
    __swig_getmethods__["rho"] = _pytipsy.TipsyGasParticle_rho_get
    if _newclass:rho = _swig_property(_pytipsy.TipsyGasParticle_rho_get, _pytipsy.TipsyGasParticle_rho_set)
    __swig_setmethods__["temp"] = _pytipsy.TipsyGasParticle_temp_set
    __swig_getmethods__["temp"] = _pytipsy.TipsyGasParticle_temp_get
    if _newclass:temp = _swig_property(_pytipsy.TipsyGasParticle_temp_get, _pytipsy.TipsyGasParticle_temp_set)
    __swig_setmethods__["hsmooth"] = _pytipsy.TipsyGasParticle_hsmooth_set
    __swig_getmethods__["hsmooth"] = _pytipsy.TipsyGasParticle_hsmooth_get
    if _newclass:hsmooth = _swig_property(_pytipsy.TipsyGasParticle_hsmooth_get, _pytipsy.TipsyGasParticle_hsmooth_set)
    __swig_setmethods__["metals"] = _pytipsy.TipsyGasParticle_metals_set
    __swig_getmethods__["metals"] = _pytipsy.TipsyGasParticle_metals_get
    if _newclass:metals = _swig_property(_pytipsy.TipsyGasParticle_metals_get, _pytipsy.TipsyGasParticle_metals_set)
    def __init__(self): 
        this = _pytipsy.new_TipsyGasParticle()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pytipsy.delete_TipsyGasParticle
    __del__ = lambda self : None;
TipsyGasParticle_swigregister = _pytipsy.TipsyGasParticle_swigregister
TipsyGasParticle_swigregister(TipsyGasParticle)

class TipsyDarkParticle(TipsyBaseParticle):
    __swig_setmethods__ = {}
    for _s in [TipsyBaseParticle]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TipsyDarkParticle, name, value)
    __swig_getmethods__ = {}
    for _s in [TipsyBaseParticle]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TipsyDarkParticle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eps"] = _pytipsy.TipsyDarkParticle_eps_set
    __swig_getmethods__["eps"] = _pytipsy.TipsyDarkParticle_eps_get
    if _newclass:eps = _swig_property(_pytipsy.TipsyDarkParticle_eps_get, _pytipsy.TipsyDarkParticle_eps_set)
    def __init__(self): 
        this = _pytipsy.new_TipsyDarkParticle()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pytipsy.delete_TipsyDarkParticle
    __del__ = lambda self : None;
TipsyDarkParticle_swigregister = _pytipsy.TipsyDarkParticle_swigregister
TipsyDarkParticle_swigregister(TipsyDarkParticle)

class TipsyStarParticle(TipsyBaseParticle):
    __swig_setmethods__ = {}
    for _s in [TipsyBaseParticle]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TipsyStarParticle, name, value)
    __swig_getmethods__ = {}
    for _s in [TipsyBaseParticle]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TipsyStarParticle, name)
    __repr__ = _swig_repr
    __swig_setmethods__["eps"] = _pytipsy.TipsyStarParticle_eps_set
    __swig_getmethods__["eps"] = _pytipsy.TipsyStarParticle_eps_get
    if _newclass:eps = _swig_property(_pytipsy.TipsyStarParticle_eps_get, _pytipsy.TipsyStarParticle_eps_set)
    __swig_setmethods__["metals"] = _pytipsy.TipsyStarParticle_metals_set
    __swig_getmethods__["metals"] = _pytipsy.TipsyStarParticle_metals_get
    if _newclass:metals = _swig_property(_pytipsy.TipsyStarParticle_metals_get, _pytipsy.TipsyStarParticle_metals_set)
    __swig_setmethods__["tform"] = _pytipsy.TipsyStarParticle_tform_set
    __swig_getmethods__["tform"] = _pytipsy.TipsyStarParticle_tform_get
    if _newclass:tform = _swig_property(_pytipsy.TipsyStarParticle_tform_get, _pytipsy.TipsyStarParticle_tform_set)
    def __init__(self): 
        this = _pytipsy.new_TipsyStarParticle()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pytipsy.delete_TipsyStarParticle
    __del__ = lambda self : None;
TipsyStarParticle_swigregister = _pytipsy.TipsyStarParticle_swigregister
TipsyStarParticle_swigregister(TipsyStarParticle)

class TipsyIOS(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TipsyIOS, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TipsyIOS, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pytipsy.delete_TipsyIOS
    __del__ = lambda self : None;
    def rdbuf(self): return _pytipsy.TipsyIOS_rdbuf(self)
    def setAdapter(self, *args): return _pytipsy.TipsyIOS_setAdapter(self, *args)
TipsyIOS_swigregister = _pytipsy.TipsyIOS_swigregister
TipsyIOS_swigregister(TipsyIOS)

class iTipsy(TipsyIOS):
    __swig_setmethods__ = {}
    for _s in [TipsyIOS]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, iTipsy, name, value)
    __swig_getmethods__ = {}
    for _s in [TipsyIOS]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, iTipsy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pytipsy.new_iTipsy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pytipsy.delete_iTipsy
    __del__ = lambda self : None;
    def DensityIn(self, *args): return _pytipsy.iTipsy_DensityIn(self, *args)
    def __iter__(self):
        return self
    def next(self):
        p = self.read()
        if p is None: raise StopIteration()
        return p

    def read(self, *args):
        if len(args) > 0: return _pytipsy.iTipsy_read(self, *args)
        pos = self.tellg().section()
        if pos == tipsypos.gas:
            g = TipsyGasParticle()
            self.read(g)
            return g
        if pos == tipsypos.dark:
            d = TipsyDarkParticle()
            _pytipsy.iTipsy_read(self, d)
            #self.read(d)
            return d
        if pos == tipsypos.star:
            s = TipsyStarParticle()
            self.read(s)
            return s
        if pos == tipsypos.header:
            h = TipsyHeader()
            self.read(h)
            return h
        return None


    def seekg(self, *args): return _pytipsy.iTipsy_seekg(self, *args)
    def tellg(self): return _pytipsy.iTipsy_tellg(self)
iTipsy_swigregister = _pytipsy.iTipsy_swigregister
iTipsy_swigregister(iTipsy)

class oTipsy(TipsyIOS):
    __swig_setmethods__ = {}
    for _s in [TipsyIOS]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, oTipsy, name, value)
    __swig_getmethods__ = {}
    for _s in [TipsyIOS]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, oTipsy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pytipsy.new_oTipsy(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pytipsy.delete_oTipsy
    __del__ = lambda self : None;
    def DensityOut(self, *args): return _pytipsy.oTipsy_DensityOut(self, *args)
    def write(self, *args): return _pytipsy.oTipsy_write(self, *args)
    def seekp(self, *args): return _pytipsy.oTipsy_seekp(self, *args)
    def tellp(self): return _pytipsy.oTipsy_tellp(self)
oTipsy_swigregister = _pytipsy.oTipsy_swigregister
oTipsy_swigregister(oTipsy)

class ifTipsy(iTipsy):
    __swig_setmethods__ = {}
    for _s in [iTipsy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ifTipsy, name, value)
    __swig_getmethods__ = {}
    for _s in [iTipsy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ifTipsy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pytipsy.new_ifTipsy(*args)
        try: self.this.append(this)
        except: self.this = this
    def rdbuf(self): return _pytipsy.ifTipsy_rdbuf(self)
    def is_open(self): return _pytipsy.ifTipsy_is_open(self)
    def open(self, *args): return _pytipsy.ifTipsy_open(self, *args)
    def close(self): return _pytipsy.ifTipsy_close(self)
    __swig_destroy__ = _pytipsy.delete_ifTipsy
    __del__ = lambda self : None;
ifTipsy_swigregister = _pytipsy.ifTipsy_swigregister
ifTipsy_swigregister(ifTipsy)

class ofTipsy(oTipsy):
    __swig_setmethods__ = {}
    for _s in [oTipsy]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ofTipsy, name, value)
    __swig_getmethods__ = {}
    for _s in [oTipsy]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ofTipsy, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pytipsy.new_ofTipsy(*args)
        try: self.this.append(this)
        except: self.this = this
    def rdbuf(self): return _pytipsy.ofTipsy_rdbuf(self)
    def is_open(self): return _pytipsy.ofTipsy_is_open(self)
    def open(self, *args): return _pytipsy.ofTipsy_open(self, *args)
    def close(self): return _pytipsy.ofTipsy_close(self)
    __swig_destroy__ = _pytipsy.delete_ofTipsy
    __del__ = lambda self : None;
ofTipsy_swigregister = _pytipsy.ofTipsy_swigregister
ofTipsy_swigregister(ofTipsy)

class tipsypos(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, tipsypos, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, tipsypos, name)
    __repr__ = _swig_repr
    invalid = _pytipsy.tipsypos_invalid
    header = _pytipsy.tipsypos_header
    gas = _pytipsy.tipsypos_gas
    dark = _pytipsy.tipsypos_dark
    star = _pytipsy.tipsypos_star
    particle = _pytipsy.tipsypos_particle
    eof = _pytipsy.tipsypos_eof
    def assign(self, *args): return _pytipsy.tipsypos_assign(self, *args)
    def __init__(self, *args): 
        this = _pytipsy.new_tipsypos(*args)
        try: self.this.append(this)
        except: self.this = this
    def section_ptr(self): return _pytipsy.tipsypos_section_ptr(self)
    def offset_ptr(self): return _pytipsy.tipsypos_offset_ptr(self)
    def __assign__(self, *args): return _pytipsy.tipsypos___assign__(self, *args)
    def __equal__(self, *args): return _pytipsy.tipsypos___equal__(self, *args)
    def section(self, *args): return _pytipsy.tipsypos_section(self, *args)
    def offset(self, *args): return _pytipsy.tipsypos_offset(self, *args)
    __swig_destroy__ = _pytipsy.delete_tipsypos
    __del__ = lambda self : None;
tipsypos_swigregister = _pytipsy.tipsypos_swigregister
tipsypos_swigregister(tipsypos)



